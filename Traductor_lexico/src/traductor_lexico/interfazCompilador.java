/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package traductor_lexico;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.StreamTokenizer;
import java.util.HashSet;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


/**
 *
 * @author raufa
 */
public class interfazCompilador extends javax.swing.JFrame {

    /**
     * Creates new form interfazCompilador
     */
    public interfazCompilador() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        btnLexico = new java.awt.Button();
        txtArea1 = new java.awt.TextArea();
        button2vdsvasd = new java.awt.Button();
        txtArea2 = new java.awt.TextArea();
        textArea3 = new java.awt.TextArea();
        Error = new java.awt.TextArea();
        btn3 = new java.awt.Button();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnLexico.setActionCommand("Lexico");
        btnLexico.setBackground(new java.awt.Color(255, 255, 255));
        btnLexico.setLabel("Lexico");
        btnLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLexicoActionPerformed(evt);
            }
        });

        button2vdsvasd.setBackground(new java.awt.Color(255, 255, 255));
        button2vdsvasd.setLabel("Sintactico");
        button2vdsvasd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2vdsvasdActionPerformed(evt);
            }
        });

        btn3.setActionCommand("Semantico");
        btn3.setBackground(new java.awt.Color(255, 255, 255));
        btn3.setLabel("Semantico");
        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3ActionPerformed(evt);
            }
        });

        jMenu1.setText("Opciones");
        jMenu1.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N

        jMenu2.setText("Abrir");
        jMenu2.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N

        jMenuItem1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jMenuItem1.setText("Abrir Archivo.txt");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenu1.add(jMenu2);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addComponent(txtArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(btnLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(98, 98, 98)
                                .addComponent(button2vdsvasd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(Error, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 69, 69)
                        .addComponent(btn3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textArea3, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(140, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtArea1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(btnLexico, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtArea2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(button2vdsvasd, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Error, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textArea3, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addComponent(btn3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void button2vdsvasdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2vdsvasdActionPerformed
     
     
     String textoIngresado=txtArea1.getText();
      
      
    String[] area = textoIngresado.split("\\s+");
    Lexical lexical;
    Sintactico sintactico;
    List<Token> tokens_analized;
    String bandera = "false";
    List<String> tokens = new ArrayList<>();
    
    try {
        for (String palabra : area) {
            if(!"".equals(palabra)){
                tokens.add(palabra);
            }
        }
        //String bandera="false";
        lexical = new Lexical(tokens);

        lexical.analize();

        tokens_analized = lexical.getResults();
        sintactico = new Sintactico(tokens_analized);
        Node root = sintactico.parse();



         String syntaxTree = sintactico.printTree(root, ""); 

           textArea3.setText(syntaxTree);
        
        Traductor_lexico.main(new String[] { textoIngresado, bandera });
        
        
    } catch (IOException e) {
        e.printStackTrace();
    }
    
       
           //Traductor_lexico.main(new String[] { textoIngresado });
       
    }//GEN-LAST:event_button2vdsvasdActionPerformed
    
    
    private void btnLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLexicoActionPerformed
    
   
    String textoIngresado = txtArea1.getText();
    String[] area = textoIngresado.split("\\s+");
    String bandera="false";
    Lexical lexical;
    List<Token> tokens_analyzed;
 
    List<String> tokens = new ArrayList<>();
   
    for (String palabra : area) {
        tokens.add(palabra);
    }
    
    lexical = new Lexical(tokens);
    lexical.analize();
    tokens_analyzed = lexical.getResults();

    
   
    StringBuilder tokenText = new StringBuilder();
    int i = 0;
    for (Token token : tokens_analyzed) {
        int num_val = token.num;
        String tokenInfo = "El token " + token.value + " es de tipo " + token.type + " " + num_val;
        tokenText.append(tokenInfo).append("\n");
        i++;
     }
    
    txtArea2.setText(tokenText.toString());
    
   
   
    }//GEN-LAST:event_btnLexicoActionPerformed

    private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3ActionPerformed
        int errores=0;
        LinkedList <String> ENT = new LinkedList<>();
        LinkedList <String> DEC = new LinkedList<>();
        LinkedList <String> TEXT = new LinkedList<>();
        LinkedList <String> TAKE = new LinkedList<>();
     
        Set<String> variablesINT = new HashSet<>();
        Set<String> variablesFLOAT = new HashSet<>();
        Set<String> variablesSTRING = new HashSet<>();
        List<String> listaErrores = new ArrayList<>();
        List<String> variablesDeclaradas = new ArrayList<>();
        

        
        String
                simbolo = "([=<>])",
                id = "([(a-z)(A-Z)](\\w)*)",
                num = "((\\d)+)",
               dec = "((\\d+\\.\\d+)|(\\.\\d+))"
                ,
               text = "((\"[^\"]*\")|(" + id + "))(\\s)*(\\+)((\\s)*(\"[^\"]*\")|(" + id + "))*"
                  ,
                
                operaciones = "(("+id+"|"+num+"|"+dec+")(\\s)*([+-/*](\\s)*("+id+"|"+num+"|"+dec+"))+)",
                defVal = "((\\s)*"+id+"(\\s)*=(\\s)*("+id+"|"+text+"|"+operaciones+"|"+num+"|"+dec+")(\\s)*(;))",

                defValVar = "((\\s)*"+id+"(\\s)*=(\\s)*("+id+"|"+text+"|"+operaciones+"|"+num+"|"+dec+")(\\s)*)",
               
                var = "((\\s)*((int)|(float)|(string))(\\b)(\\s)*("+id+"|"+defValVar+")((\\s)*(,(\\s)*("+id+"|"+defValVar+")))*(\\s)*(;))",
                main = "((\\s)*"+id+"(\\b)(\\s)*main(\\s)*(\\{)[.\\W\\w\\s]*(END(\\s)*(\\})(\\s)*)$)",
                main2 = "((\\s)*"+id+"(\\b)(\\s)*main(\\s)*(\\{))",
                main3 = "((\\s)*END(\\s)*(\\})(\\s)*)",
                
              
                 entero = "[0-9]*",
                decimal = "[0-9]*.[0-9]+";
        
        
   
                StringTokenizer st = new StringTokenizer(txtArea1.getText(),";{}",true);
                String token = "", txt = "", e;
                int i = 1,start = 0, when = 0, it = 0, eB = 0;
                Error.setText("");
                
               
                    
                       while (st.hasMoreTokens()){
                           
                            token = st.nextToken();
                            StringTokenizer lin = new StringTokenizer(token,"\n",true);
                            
                            if(st.hasMoreTokens())token = token+st.nextToken();
                            if(token.matches("[.\\W\\w\\s]*(\\})") && st.countTokens() == 1){
                                String auxTok = st.nextToken();
                                token = token+(auxTok.substring(0,auxTok.indexOf("\n")));
                            }
                                
                                while (lin.hasMoreTokens()){
                                    e = lin.nextToken();
                                    if("\n".equals(e)) i++;
                                }
                            
                           
                            
                            
                            if((token.matches(var) || token.matches(defVal) || token.matches(main2) || token.matches(main3) || token.matches("(\\s)*(\\$)") ) && eB == 0){
                              
                                if(token.matches(var)){
                                    StringTokenizer stTipo = new StringTokenizer(token," ,;");
                                    String tipo = stTipo.nextToken();
                                    
                                    if(tipo.contains("int")){
                                        
                                        while(stTipo.hasMoreTokens()){
                                            tipo = stTipo.nextToken();
                                            
                                            if(ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo)|| TAKE.contains(tipo)){
                                                Error.append("La Variable esta repetida ("+tipo+")  + \n"+token);
                                                listaErrores.add("La Variable esta repetida (" + tipo + ") " + i + ":\n"
                                                    + "________________________________________________________________________\n" + token);

                                                for(int j = 1; j <i; j++){
                                                    txt += "\n";
                                                }
                                              
                                                errores=1;
                                                
                                            }
                                            
                                            ENT.add(tipo);
                                            //variablesINT.add(tipo);
                                        }
                                    }
                                    if(tipo.contains("float")){
                                        
                                        while(stTipo.hasMoreTokens()){
                                            tipo = stTipo.nextToken();
                                            
                                            if(ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo)|| TAKE.contains(tipo)){
                                                Error.append("La Variable esta repetida ("+tipo+") "+i+": \n"
                                                               + "________________________________________________________________________\n"+token);
                                                for(int j = 1; j <i; j++){
                                                    txt += "\n";
                                                }
                                            
                                                 errores=1;
                                                
                                            }
                                            
                                            DEC.add(tipo);
                                         
                                        }
                                    }
                                   // AQUI ES DONDE ENTRA EL STRING
                                    if(tipo.contains("string")){
                                       
                                        while(stTipo.hasMoreTokens()){
                                            tipo = stTipo.nextToken();
                                            variablesDeclaradas.add(tipo);
                                            StringTokenizer tipo2 = new StringTokenizer(tipo," =;");
                                            tipo=tipo2.nextToken();
                                            
                                            
                                            if(ENT.contains(tipo) || DEC.contains(tipo) || TEXT.contains(tipo)|| TAKE.contains(tipo)){
                                                Error.append("La variable esta repetida ="+tipo+"en la linea  "+i+": \n"
                                                               + "________________________________________________________________________\n"+token);
                                                for(int j = 1; j <i; j++){
                                                    txt += "\n";
                                                }
                                                //LineaError.setText(txt+" ¡!");
                                                 errores=1;
                                               
                                            }
                                            
                                            TEXT.add(tipo);
                                            
                                        }
                                    }
                                }
                                //Validacion PARA LAS VARIAN;ES
                                    System.out.println("token ="+token);
                                if(token.matches(defVal)){
                                    
                                    StringTokenizer stComprobar = new StringTokenizer(token," \n\t=;");
                                    
                                    String ID = stComprobar.nextToken(), comprobar = "", tok = "";
                     
                                    while(stComprobar.hasMoreTokens()){
                                            comprobar += stComprobar.nextToken();
                                        }
                                    
                                    if(ENT.contains(ID)){
                                        //add a list of enter
                                        variablesINT.add(ID);
                                        StringTokenizer stComprobarE = new StringTokenizer(comprobar,"+*/-");
                                        while(stComprobarE.hasMoreTokens()){
                                            tok = stComprobarE.nextToken();
                                            System.out.println("El token es="+ tok);
                                            
                                            if(tok.matches(id)){
                                                if(ENT.contains(tok));
                                              
                                                else{
                                                    Error.setText("ERROR  ("+tok+") "+i+": \n"
                                                                    + "________________________________________________________________________\n"+token);
                                                    for(int j = 1; j <i; j++){
                                                        txt += "\n";
                                                    }
                                                    
                                                     errores=1;
                                                    
                                                }
                                            }
                                              else{
                                                    if(tok.matches(entero));
                                                    else{
                                                        Error.append("ERROR SEMANTICO ("+tok+") "+i+": \n"
                                                                        + "________________________________________________________________________\n"+token);
                                                        for(int j = 1; j <i; j++){
                                                            txt += "\n";
                                                        }
                                                  
                                                         errores=1;
                                                        
                                                  }
                                            }
                                        }
                                        //AQUI ES DONDE SE REVISA SI LAS VARIABLES YA HAN SIDO DECLARADAS
                                   
                                    }
                                    else {
                                        if(DEC.contains(ID)){
                                             variablesFLOAT.add(ID);
                                            StringTokenizer stComprobarD = new StringTokenizer(comprobar,"+*/-");
                                            while(stComprobarD.hasMoreTokens()){
                                                tok = stComprobarD.nextToken();

                                                if(tok.matches(id)){
                                                    if(DEC.contains(tok));
                                                    else{
                                                        Error.append("ERROR SEMÁNTICO ("+tok+") "+i+": \n"
                                                                        + "________________________________________________________________________\n"+token);
                                                        for(int j = 1; j <i; j++){
                                                            txt += "\n";
                                                        }
                                                       
                                                         errores=1;
                                                       
                                                    }
                                                }
                                                else{
                                                    if(tok.matches(decimal));
                                                    else{
                                                        Error.setText("ERROR SEMANTICO ("+tok+") "+i+": \n"
                                                                        + "________________________________________________________________________\n"+token);
                                                        for(int j = 1; j <i; j++){
                                                            txt += "\n";
                                                        }
                                                       
                                                         errores=1;
                                                       
                                                    }
                                                }
                                            }
                                        }
                                        else {
                                            if(TEXT.contains(ID)){
                                                 variablesSTRING.add(ID);
                                                   if(comprobar.matches("((((\")[.\\W\\w\\s]*(\"))|("+id+"))((\\s)*(\\+)((\\s)*((\")[.\\W\\w\\s]*(\"))|("+id+")))*)"));
                                                   else {
                                                       Error.append("ERROR SEMANTICO "+i+": \n"
                                                                        + "________________________________________________________________________\n"+token);
                                                        for(int j = 1; j <i; j++){
                                                            txt += "\n";
                                                        }
                                                        
                                                         errores=1;
                                                        
                                                   }
                                            }
                                            else{
                                                Error.append("Variable no declarada "+ID+": \n"
                                                                + "________________________________________________________________________\n"+token);
                                                for(int j = 1; j <i; j++){
                                                   txt += "\n";
                                                }
                                              
                                                 errores=1;
                                               
                                            } 
                                        }
                                    }     
                                }
                                
                            }
                           else{
                              
                                  
                                    if(token.contains("STRING")){
                                        
                                      for(int j = 1; j <i; j++){
                                                   txt += "\n";
                                                }
                                               
                                                 errores=1;
                                               
                                        
                                       
                                    }
                                  if(token.contains("int")){
                                      Error.append("Un int no puede recibir un string"+token);
                                      for(int j = 1; j <i; j++){
                                                   txt += "\n";
                                                }
                                                //LineaError.setText(txt+" ¡!");
                                                 errores=1;
                                               
                                      
                                  } if(token.contains("float")){
                                      Error.append("Un FLOAT no puede recibir un string"+token);
                                      for(int j = 1; j <i; j++){
                                                   txt += "\n";
                                                }
                                                //LineaError.setText(txt+" ¡!");
                                                 errores=1;
                                               
                                      
                                  }
                                          else{
                                        Error.append("Variable no declarada "+i+": \n"
                                                                + "________________________________________________________________________\n"+token);
                                                for(int j = 1; j <i; j++){
                                                   txt += "\n";
                                                }
                                            
                                                 errores=1;
                                                
                                  }
                               
                            }
                    }
                            for (String variable : ENT) {
                                                if (variablesINT.contains(variable)) {
                                                    
                                                   //Error.append("\nLa variable  '" + variable + "' YA SE USO.\n");
                                                }
                                                else if (variable.contains("=")){
                                                   // Error.append("\nLa variable  '" + variable + "' YA SE USO.\n");
                                                }
                                                else{
                                                    Error.append("\n\nLa variable Entera  = '" + variable + "'  fue declarada pero no se usa.\n");
                                                }
                                }
                             for (String variable : DEC) {
                                                if (variablesFLOAT.contains(variable)) {
                                                    
                                                   //Error.append("\nLa variable  '" + variable + "' YA SE USO.\n");
                                                }
                                                else if (variable.contains("=")){
                                                   // Error.append("\nLa variable  '" + variable + "' YA SE USO.\n");
                                                }
                                                else{
                                                    Error.append("\n\nLa variable Flotante  = '" + variable + "'  fue declarada pero no se usa.\n");
                                                }
                                }
                            
                            for (String  variable:TEXT){
                                   if (variablesSTRING.contains(variable)) {
                                                    
                                                   //Error.append("\nLa variable  '" + variable + "' YA SE USO.\n");
                                                }
                                                else if (!variablesDeclaradas.contains(variable)){
                                                   // Error.append("\nLa variable  '" + variable + "' YA SE USO.\n");
                                                }
                                                else{
                                                   Error.append("\n\nLa variable String  = '" + variable + "'  fue declarada pero no se usa.\n");
                                                }
                                
                            }
                    
                
                   
               
         
       
    }//GEN-LAST:event_btn3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        FileNameExtensionFilter filtro= new FileNameExtensionFilter("Archivos Word y txt","docx","txt");
        File f;
        JFileChooser j= new JFileChooser();
        j.setCurrentDirectory(new File("C:\\Users\\raufa\\OneDrive\\Documentos\\NetBeansProjects\\Traductor_lexico\\src\\traductor_lexico"));
        j.getSelectedFile();
        j.setFileFilter(filtro);//Añado el filtro
        j.showOpenDialog(j);
        String path;

        int contPalabra=0;//Creo un contador para las palabras
        try{
            //Aqui se manda la ruta del archivo
            path= j.getSelectedFile().getAbsolutePath();//Obtiene la Ruta
            String name=j.getSelectedFile().getName();//Obtiene el nombre
            String lectura="";
            f = new File(path);

            try{

                FileReader fr = new FileReader(f);
                BufferedReader br = new BufferedReader(fr);
                String aux;
                //Aqui cuento cuantas palabras hay
                StreamTokenizer st=new StreamTokenizer(new FileReader(f));
                while(st.nextToken()!=StreamTokenizer.TT_EOF){
                    if(st.ttype==StreamTokenizer.TT_WORD){
                        contPalabra++;

                    }
                    //lblPalabras.setText("Total de Palabras:"+contPalabra);
                    //txtNombre.setText(name);
                    //txtRuta.setText(path);

                }

                //Aqui empieza a leer el archivo linea por linea hasta que en el texto ya no haya nada

                while((aux = br.readLine())!=null)

                lectura = lectura+aux+"\n";//Voy acumulando todo en un string

            }catch(IOException e){}

            txtArea1.setText(lectura);//Mando lo que resulto de la lectura
            int contador=0;
            StringTokenizer st = new StringTokenizer(txtArea1.getText(),"\n",true);
            String Text = "",token;
            contador = 1;

            while (st.hasMoreTokens()){
                token= st.nextToken();
                if("\n".equals(token)) contador++;
            }

            for(int i = 1; i <= contador; i++){
                Text += i+"\n";
            }
            //Lineas.setText(Text);

            //contarCaracteres(lectura);//Mando llamar el metodo de contar caracteres
            //mayusculasyminusculas(lectura);
        }catch(NullPointerException e){

            javax.swing.JOptionPane.showMessageDialog(j, "Has seleccionado cerrar programa, saliendo...");

            System.exit(0);

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    
    public void setTextArea3(String content) {
        System.out.println("Contiene= " + content);

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                textArea3.setText(content);
            }
        });
}




    public static void main(String args[]) {
       
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(interfazCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(interfazCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(interfazCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(interfazCompilador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

      
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new interfazCompilador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.TextArea Error;
    private java.awt.Button btn3;
    private java.awt.Button btnLexico;
    private java.awt.Button button2vdsvasd;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private java.awt.TextArea textArea3;
    private java.awt.TextArea txtArea1;
    private java.awt.TextArea txtArea2;
    // End of variables declaration//GEN-END:variables
}
